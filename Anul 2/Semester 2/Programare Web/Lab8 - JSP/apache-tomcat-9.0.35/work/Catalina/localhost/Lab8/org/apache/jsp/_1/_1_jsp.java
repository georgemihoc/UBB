/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-05-27 18:24:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.sql.DriverManager;

public final class _1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML>\n");
      out.write("<html lang=\"ro\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Problema 1</title>\n");
      out.write("  <body>\n");
      out.write("    <b>Admin login</b><br>\n");
      out.write("\n");
      out.write("    <form action=\"1.jsp\" method=\"post\">\n");
      out.write("\n");
      out.write("    Username :<input type=\"text\" name=\"username\" />\n");
      out.write("    <br>\n");
      out.write("    Password :<input type=\"password\" name=\"password\" />\n");
      out.write("    <br>\n");
      out.write("    <input type=\"submit\" name=\"login\" value=\"Login\"/>\n");
      out.write("\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    ");

    String driver = "com.mysql.jdbc.Driver";
    Class.forName(driver);
    java.sql.Connection con = DriverManager.getConnection("jdbc:mysql://localhost/db?serverTimezone=UTC","root","");

    String loginButton = request.getParameter("login");
    if(loginButton!=null && loginButton.equals("Login")){

      String username=request.getParameter("username");
      String password=request.getParameter("password");
      if(!username.equals("") && !password.equals("")){
        Statement st= con.createStatement();
        ResultSet rs=st.executeQuery("SELECT * FROM users");
        while(rs.next())
        {

          if(rs.getString("username").equals(username) && rs.getString("password").equals(password)){
            session.setAttribute("user","ok");
            response.sendRedirect("1logged.jsp");
          }
        }
        
      out.write("\n");
      out.write("          Invalid credentials\n");
      out.write("        ");

      }

    }

    
      out.write("\n");
      out.write("\n");
      out.write("     <br><br>\n");
      out.write("    <b>Article</b>\n");
      out.write("  <br>\n");
      out.write("  <div>The 16-inch MacBook Pro (2019) has the keyboard every Apple laptop should have. And I'm glad that Apple has brought it to the MacBook Air, as superior ergonomic comfort should not be a premium feature. There are plenty of other reasons to splurge on this laptop, including its vivid 16-inch display with narrower bezels, amazing audio system and epic battery life.\n");
      out.write("\n");
      out.write("      This is also a very powerful notebook, thanks to the combination of Core i9 muscle, gobs of RAM and one of the fastest SSDs in a laptop. It's up to you to decide how much oomph you need â and how much extra you're willing to pay above the $2,399 starting price. The only strikes against the 16-inch MacBook Pro are the sheer expense and the lack of legacy ports that some pros would appreciate.\n");
      out.write("\n");
      out.write("      If you're on the fence between Windows and macOS, the Dell XPS 15 is a compelling MacBook Pro alternative, as it offers comparable performance, a keyboard with even more travel and an OLED display for hundreds less. But if you are set on a Mac and demand a large canvas for work and play, the 16-inch MacBook Pro should satisfy for years to come.\n");
      out.write("  <div>\n");
      out.write("\n");
      out.write("  <br>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("<b>Add a comment</b><br>\n");
      out.write("<form action=\"1.jsp\" method=\"post\" >\n");
      out.write("\n");
      out.write("\tUser:<input type=\"text\" name=\"user\">\n");
      out.write("\t<br>\n");
      out.write("\tComment:\n");
      out.write("\t<br>\n");
      out.write("\t<textarea name=\"comment\"></textarea>\n");
      out.write("\t<br>\n");
      out.write("\t<input type=\"submit\" name=\"addComment\" value=\"Add\">\n");
      out.write("\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("<br>\n");
      out.write("<b>User comments</b><br><br>\n");
      out.write("\n");
      out.write("\n");

    Statement st= con.createStatement();
    ResultSet rs=st.executeQuery("SELECT * FROM comments WHERE moderated=1");
    while(rs.next())
    {
          
      out.write("\n");
      out.write("            <tr>\n");
      out.write("                  <td><b>");
      out.print(rs.getString("user") );
      out.write(": </b></td>\n");
      out.write("                  <td>");
      out.print(rs.getString("comment") );
      out.write("</td>\n");
      out.write("            </tr>\n");
      out.write("            <br>\n");
      out.write("          ");

    }

      out.write('\n');
      out.write('\n');

String addButton = request.getParameter("addComment");
if(addButton!=null && addButton.equals("Add"))
{
	String user = request.getParameter("user");
	String comment = request.getParameter("comment");
	if(!user.equals("") && !comment.equals("")) {
		PreparedStatement ps = con.prepareStatement("INSERT INTO comments (user,comment,moderated) VALUES (?,?,?)");
    int moderated = 0;
    ps.setString(1, user);
		ps.setString(2, comment);
		ps.setInt(3, moderated);
		ps.execute();
	}
}

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
