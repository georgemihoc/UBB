{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh18560\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 jbits 32 ; assembling for the 32 bits architecture\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
; declare the EntryPoint (a label defining the very first instruction of the program)\
global start        \
\
; declare external functions needed by our program\
extern exit               ; tell nasm that exit exists even if we won't be defining it\
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll\
                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions\
\
; our data is declared here (the variables needed by our program)\
segment data use32 class=data\
    sir db '+', '4', '2', 'a', '8', '4', 'X', '5'\
    lung equ $-sir\
    newSir resb lung\
    ; ...\
\
; our code starts here\
segment code use32 class=code\
    start:\
    mov ecx,lung\
    mov esi,0\
    mov edi,0\
    \
    repeta:\
        mov al,[sir + esi]\
        cmp al,'0'\
        jge maiMareSauEgalCu0\
        jl maiMicDecat0\
        \
        maiMareSauEgalCu0:\
            cmp al,'9'\
            jle maiMicSauEgalcu9\
            jg maiMareDecat9\
            \
            maiMicSauEgalcu9:\
                ;daca e mai mare decat '0' si mai mic decat '9' e sigur cifra\
                mov [newSir + edi], al\
                inc edi\
                inc esi\
                jecxz final\
                loop repeta\
              \
            maiMareDecat9:\
                inc esi\
                jecxz final\
                loop repeta\
           \
        maiMicDecat0:\
            inc esi\
            jecxz final\
            loop repeta\
        ; ...\
    final:\
        ; exit(0)\
        push    dword 0      ; push the parameter for exit onto the stack\
        call    [exit]       ; call exit to terminate the program}