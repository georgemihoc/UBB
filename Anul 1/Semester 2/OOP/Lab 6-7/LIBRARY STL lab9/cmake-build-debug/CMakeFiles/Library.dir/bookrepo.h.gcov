        -:    0:Source:/Users/george/Documents/UBB/Anul 1/Semester 2/OOP/Lab 6-7/LIBRARY STL lab9/bookrepo.h
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#pragma once
        -:    2:#include "Book.h"
        -:    3:
        -:    4:#include <vector>
        -:    5:#include <string>
        -:    6:using namespace std;
        -:    7:
        -:    8:
    #####:    9:class BookRepo {
        -:   10:	vector<Book> all;
        -:   11:	vector<Book> all_basket;
        -:   12:	/*
        -:   13:	metoda privata verifica daca exista deja p in repository
        -:   14:	*/
        -:   15:	bool exist(const Book& p);
        -:   16:	bool exist_basket(const Book& p);
        -:   17:
        -:   18:public:
    #####:   19:	BookRepo() = default;
        -:   20:	//nu permitem copierea de obiecte
        -:   21:	BookRepo(const BookRepo& ot) = delete;
        -:   22:	/*
        -:   23:	Salvare Book
        -:   24:	arunca exceptie daca mai exista o carte cu acelasi titlu si autor
        -:   25:	*/
        -:   26:	int dim();
        -:   27:	int dim_basket();
        -:   28:	void store(const Book& p);
        -:   29:	void store_basket(const Book& p);
        -:   30:	void random_basket(int nr);
        -:   31:	void modify(int poz,const Book&p);
        -:   32:	void remove(int poz);
        -:   33:	void remove_all();
        -:   34:	void remove_basket();
        -:   35:
        -:   36:
        -:   37:	/*
        -:   38:	Cauta
        -:   39:	arunca exceptie daca nu exista carte
        -:   40:	*/
        -:   41:	Book find(const string& titlu, const string& autor) const;
        -:   42:	Book find_basket(const string& titlu, const string& autor) const;
        -:   43:
        -:   44:	/*
        -:   45:	returneaza toate cartile salvate
        -:   46:	*/
        -:   47:	const vector<Book>& getAll() const noexcept;
        -:   48:	const vector<Book>& getAllBasket() const noexcept;
        -:   49:
        -:   50:
        -:   51:};
        -:   52:/*
        -:   53:class Basket{
        -:   54:	vector<Book> all_basket;
        -:   55:public:
        -:   56:	Basket() = default;
        -:   57:	//nu permitem copierea de obiecte
        -:   58:	Basket(const Basket& ot) = delete;
        -:   59:
        -:   60:	Salvare Book
        -:   61:	arunca exceptie daca mai exista o carte cu acelasi titlu si autor
        -:   62:
        -:   63:	int dim_basket();
        -:   64:
        -:   65:
        -:   66:	Cauta
        -:   67:	arunca exceptie daca nu exista carte
        -:   68:
        -:   69:
        -:   70:
        -:   71:	returneaza toate cartile salvate
        -:   72:
        -:   73:};*/
        -:   74:/*
        -:   75:Folosit pentru a semnala situatii exceptionale care pot aparea in repo
        -:   76:*/
        -:   77:class BookRepoException {
        -:   78:	string msg;
        -:   79:public:
        -:   80:	BookRepoException(string m) :msg{ m } {}
        -:   81:	//functie friend (vreau sa folosesc membru privat msg)
        -:   82:	friend ostream& operator<<(ostream& out, const BookRepoException& ex);
        -:   83:};
        -:   84:
        -:   85:ostream& operator<<(ostream& out, const BookRepoException& ex);
        -:   86:
        -:   87:void testeRepo();
