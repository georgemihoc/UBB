        -:    0:Source:/Users/george/Documents/UBB/Anul 1/Semester 2/OOP/Lab 6-7/LIBRARY STL lab9/BookStore.h
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#pragma once
        -:    2:
        -:    3:#include "Book.h"
        -:    4:#include "bookrepo.h"
        -:    5:#include <string>
        -:    6:#include <vector>
        -:    7:#include <map>
        -:    8:#include <functional>
        -:    9:#include "validator.h"
        -:   10:#include <stack>
        -:   11:#include "ActiuneUndo.h"
        -:   12:
        -:   13:using namespace std;
        -:   14:
        -:   15:typedef bool(*MaiMicF)(const Book&, const Book&);
        -:   16:
    #####:   17:class BookStore {
        -:   18:	BookRepo& rep;
        -:   19:	BookValidator& val;
        -:   20:	vector<vector<Book>> undoActions;//vector undo
        -:   21:	vector<vector<Book>> undoBasket;//vector undo cos
        -:   22:
        -:   23:	vector<ActiuneUndo*> undoActions1; //vector undo
        -:   24:
        -:   25:	/*
        -:   26:	 Functie de sortare generala
        -:   27:	 maiMicF - functie care compara 2 Book, verifica daca are loc relatia mai mare
        -:   28:	          - poate fi orice functe (in afara clasei) care respecta signatura (returneaza bool are 2 parametrii Book)
        -:   29:			  - poate fi functie lambda (care nu capteaza nimic in capture list)
        -:   30:	 returneaza o lista sortata dupa criteriu dat ca paramatru
        -:   31:	*/
        -:   32:	vector<Book> generalSort(MaiMicF maiMicF)const;
        -:   33:	//vector<Book> raport()const;
        -:   34:
        -:   35:		/*
        -:   36:        Functie generala de filtrare
        -:   37:        fct - poate fi o functie
        -:   38:        fct - poate fi lambda, am folosit function<> pentru a permite si functii lambda care au ceva in capture list
        -:   39:        returneaza doar cartile care trec de filtru (fct(Book)==true)
        -:   40:        */
        -:   41:	vector<Book> filtreaza(function<bool(const Book&)> fct)const;
        -:   42:public:
    #####:   43:	BookStore(BookRepo& rep, BookValidator& val) noexcept:rep{ rep }, val{ val }{
    #####:   44:	}
        -:   45:	//nu permitem copierea de obiecte Library
        -:   46:	BookStore(const BookStore& ot) = delete;
        -:   47:	/*
        -:   48:	 returneaza toate cartile in ordinea in care au fost adaugate
        -:   49:	*/
        -:   50:	const vector<Book>& getAll() const noexcept{
        -:   51:		return rep.getAll();
        -:   52:	}
        -:   53:	const vector<Book>& getAllBasket() const noexcept{
        -:   54:		return rep.getAllBasket();
        -:   55:	}
        -:   56:	/*
        -:   57:	Adauga un nou Book
        -:   58:	arunca exceptie daca: nu se poate salva, nu este valid
        -:   59:	*/
        -:   60:	//void addBook(const string& type, const string& species, int price);
        -:   61:	void addBook(const string& title, const string& writer,const string& genre, int year) ;
        -:   62:	void addBookBasket(const string& title, const string& writer) ;
        -:   63:	void randomService(int nr);
        -:   64:	void sterge(int poz);
        -:   65:    void stergeBasket();
        -:   66:    void saveFile();
        -:   67:    void saveFileBasket();
        -:   68:    void undo(stack<int>comenzi);
        -:   69:    void undo1();
        -:   70:	void dealoc();
        -:   71:	/*
        -:   72:        Sorteaza dupa titlu
        -:   73:	*/
        -:   74:	vector<Book> sortByTitle()const;
        -:   75:	/*
        -:   76:	Sorteaza dupa autor
        -:   77:	*/
        -:   78:	vector<Book> sortByWriter()const;
        -:   79:	/*
        -:   80:	Sorteaza dupa year+genre
        -:   81:	*/
        -:   82:	vector<Book> sortByYearGenre() const;
        -:   83:	vector<Book> sortByGenre() const;
        -:   84:	/*
        -:   85:	returneaza doar cartile dintr.un anumit an
        -:   86:	*/
        -:   87:	vector<Book> filtrareYear(int pret)const;
        -:   88:
        -:   89:	/*
        -:   90:	returneaza doar cartile cu un anumit titlu
        -:   91:	*/
        -:   92:	vector<Book> filterTitle(const string& title)const;
        -:   93:	map<string,int> filterGenre()const;
        -:   94:	void modify(int poz,const string& title, const string& writer,const string& genre , int year);
        -:   95:	Book cauta(const string& title, const string& writer);
        -:   96:};
        -:   97:void testCtr();
