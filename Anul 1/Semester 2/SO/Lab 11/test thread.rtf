{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 Scrieti un program C care primeste n fisiere ca argumente in linia de\
comanda. Programul va crea n thread-uri, alocate dinamic in memorie, fiecare\
thread va contoriza in 2 variabile globale numarul de litere mari si suma\
cifrelor din fisierele date ca si argument, fiecare thread va procesa\
un singur fisier, primit ca argument. Accesul ca variabilele globale se va \
face sincronizat, folosind variabile mutex.\
De avut in vedere: lipsa indentarii coului se penalizeza.\
\
\
#include<stdlib.h>\
#include<stdio.h>\
#include<pthread.h>\
#include<string.h>\
\
int cifre,caps;\
\
pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;\
\
void* f(void* a) \{\
\
        char* s = (char*) a;\
        char nr[255];\
        int j,n;\
        FILE* f;\
        f = fopen(s,"r");\
	while(fgets(nr,255,f) != NULL) \{\
                //printf("Linia: %s\\n",nr);\
                n = 0;\
                for(j=0;j<strlen(nr);++j) \{\
			pthread_mutex_lock(&mtx);\
			if(nr[j]>='0' && nr[j]<='9')\
				cifre=cifre+nr[j]-'0';\
			else if(nr[j]>='A' && nr[j]<='Z')\
				caps+=1;\
			pthread_mutex_unlock(&mtx);\
		\}\
	\}\
	fclose(f);\
	return NULL;\
\}\
\
int main(int argc,char* argv[]) \{\
	//pthread_t t[100];\
	pthread_t *t=malloc(argc*sizeof(pthread_t));\
	int i;\
	for(i = 1; i < argc ; i++) \{\
		pthread_create(&t[i],NULL,f,(void *)argv[i]);\
	\}\
	for(i = 1;i < argc; i++) \{\
		pthread_join(t[i],NULL);\
	\}\
	printf("Numarul de litere mari: %d \\nSuma cifrelor: %d\\n",caps,cifre);\
	return 0;\
\}}